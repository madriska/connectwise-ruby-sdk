
require 'spec_helper'
require 'json'
require 'date'

# Unit tests for ConnectWise::ShipmentMethod
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
RSpec.describe 'ShipmentMethod' do
  before do
    # run before each test
    @instance = ConnectWise::ShipmentMethod.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ShipmentMethod' do
    it 'should create an instance of ShipmentMethod' do
      expect(@instance).to be_instance_of(ConnectWise::ShipmentMethod)
    end
  end
  describe 'test attribute "id"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "name"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "default_flag"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "tracking_url"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "shipping_type"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["None", "FedExTwoDay", "FedExPriority", "FedExGround", "UpsNextDay", "UpsSecondDay", "UpsGround", "CourierService", "UspsPriority", "UspsExpress"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.shipping_type = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "_info"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
