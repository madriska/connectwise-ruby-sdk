
require 'spec_helper'
require 'json'
require 'date'

# Unit tests for ConnectWise::CompanyMerge
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
RSpec.describe 'CompanyMerge' do
  before do
    # run before each test
    @instance = ConnectWise::CompanyMerge.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CompanyMerge' do
    it 'should create an instance of CompanyMerge' do
      expect(@instance).to be_instance_of(ConnectWise::CompanyMerge)
    end
  end
  describe 'test attribute "to_company_id"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "name"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.name = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "identifier"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.identifier = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "status"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.status = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "type"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.type = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "primary_address"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.primary_address = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "primary_contact"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.primary_contact = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "phone"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.phone = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "fax"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.fax = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "website"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.website = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "market"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.market = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "territory"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.territory = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "revenue"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.revenue = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "revenue_year"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.revenue_year = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "number_of_employees"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.number_of_employees = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "sic_code"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.sic_code = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "date_acquired"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.date_acquired = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "time_zone"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.time_zone = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "source_list"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.source_list = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "user_defined_field1"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.user_defined_field1 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "user_defined_field2"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.user_defined_field2 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "user_defined_field3"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.user_defined_field3 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "user_defined_field4"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.user_defined_field4 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "user_defined_field5"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.user_defined_field5 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "user_defined_field6"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.user_defined_field6 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "user_defined_field7"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.user_defined_field7 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "user_defined_field8"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.user_defined_field8 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "user_defined_field9"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.user_defined_field9 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "user_defined_field10"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.user_defined_field10 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "billing_address"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.billing_address = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "billing_contact"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.billing_contact = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "tax_code"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.tax_code = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "account_number"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.account_number = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "billing_terms"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["From", "To"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.billing_terms = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "notes"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Discard", "Merge"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.notes = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "sites"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Discard", "Merge"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.sites = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "activities"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Discard", "Merge"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.activities = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "opportunities"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Discard", "Merge"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.opportunities = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "services"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Discard", "Merge"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.services = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "projects"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Discard", "Merge"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.projects = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "contacts"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Discard", "Merge"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.contacts = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "documents"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Discard", "Merge"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.documents = value }.not_to raise_error
       #end
    end
  end

end
